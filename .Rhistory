#Convert to daily table
j=1
newd<-boolean_table[seq(j, 768, 24),]
daily<-data.frame(hour(newd[1,1]),mean(newd[,2]),mean(newd[,3]),mean(newd[,4]),mean(newd[,5]),mean(newd[,6]),mean(newd[,7]),mean(newd[,8]),mean(newd[,9]),mean(newd[,10]),mean(newd[,11]))
colnames(daily) <- c("Time","TV","home_theatre","treadmill","iron","Oven","hoover","washing_machine","dish_washer","toaster","hair_dryer")
j=j+1
while(j<=24)
{
newd<-boolean_table[seq(j, 768, 24),]
newdaily<-data.frame(hour(newd[1,1]),mean(newd[,2]),mean(newd[,3]),mean(newd[,4]),mean(newd[,5]),mean(newd[,6]),mean(newd[,7]),mean(newd[,8]),mean(newd[,9]),mean(newd[,10]),mean(newd[,11]))
colnames(newdaily)  <- c("Time","TV","home_theatre","treadmill","iron","Oven","hoover","washing_machine","dish_washer","toaster","hair_dryer")
daily<-rbind(daily,newdaily)
j=j+1
}
#convert to ploting table
k=1
x=sprintf("%d:00 to %d:00",daily[k,1],(daily[k,1]+1))
y<-c("TV","Home_theatre","Treadmill","Iron","Oven","Hoover","Washing_machine","Dish_washer","Toaster","Hair_dryer")
graphtable <- expand.grid(X=x, Y=y)
graphtable$Z<-c(daily[k,2:11])
k=k+1
while(k<=24)
{
x=sprintf("%d:00 to %d:00",daily[k,1],(daily[k,1]+1))
newgraphline <- expand.grid(X=x, Y=y)
newgraphline$Z<-c(daily[k,2:11])
graphtable<-rbind(graphtable,newgraphline)
k=k+1
}
graphtable$Z<-as.numeric(graphtable$Z)
q<-ggplot(graphtable, aes(X, Y, fill= Z)) +
geom_tile()
q + theme(axis.text.x = element_text(angle = 90, hjust = 1))
#convert to morning,noon,afternoon(combine with evening), night
#morning:6:00AM to 11:00AM
#noon: 11:00AM to 2:00PM
#afternoon 2:00PM to 8:00PM
#night 8:00PM to 6:00AM
#four_block_table
#totally 32 days data
#morning
morning<-boolean_table[c(seq(7, 768, 24),seq(8, 768, 24),seq(9, 768, 24),seq(10, 768, 24),seq(11, 768, 24)),]
i=1
temp<-morning[seq(i,160,32),]
morning_table<-data.frame(c(as.Date(temp[1,1])),as.numeric(sum(temp[,2])>0),as.numeric(sum(temp[,3])>0),as.numeric(sum(temp[,4])>0),as.numeric(sum(temp[,5])>0),as.numeric(sum(temp[,6])>0),as.numeric(sum(temp[,7])>0),as.numeric(sum(temp[,8])>0),as.numeric(sum(temp[,9])>0),as.numeric(sum(temp[,10])>0),as.numeric(sum(temp[,11])>0))
colnames(morning_table)<- c("Time","TV","home_theatre","treadmill","iron","Oven","hoover","washing_machine","dish_washer","toaster","hair_dryer")
while(i<32){
i=i+1
temp<-morning[seq(i,160,32),]
morning_table_new<-data.frame(c(as.Date(temp[1,1])),as.numeric(sum(temp[,2])>0),as.numeric(sum(temp[,3])>0),as.numeric(sum(temp[,4])>0),as.numeric(sum(temp[,5])>0),as.numeric(sum(temp[,6])>0),as.numeric(sum(temp[,7])>0),as.numeric(sum(temp[,8])>0),as.numeric(sum(temp[,9])>0),as.numeric(sum(temp[,10])>0),as.numeric(sum(temp[,11])>0))
colnames(morning_table_new)<- c("Time","TV","home_theatre","treadmill","iron","Oven","hoover","washing_machine","dish_washer","toaster","hair_dryer")
morning_table<-rbind(morning_table,morning_table_new)
}
four_block_table<-data.frame("morning",mean(morning_table[,2]),mean(morning_table[,3]),mean(morning_table[,4]),mean(morning_table[,5]),mean(morning_table[,6]),mean(morning_table[,7]),mean(morning_table[,8]),mean(morning_table[,9]),mean(morning_table[,10]),mean(morning_table[,11]))
colnames(four_block_table)<- c("Time","TV","home_theatre","treadmill","iron","Oven","hoover","washing_machine","dish_washer","toaster","hair_dryer")
#noon
noon<-boolean_table[c(seq(12, 768, 24),seq(13, 768, 24),seq(14, 768, 24)),]
i=1
temp<-noon[seq(i,96,32),]
noon_table<-data.frame(c(as.Date(temp[1,1])),as.numeric(sum(temp[,2])>0),as.numeric(sum(temp[,3])>0),as.numeric(sum(temp[,4])>0),as.numeric(sum(temp[,5])>0),as.numeric(sum(temp[,6])>0),as.numeric(sum(temp[,7])>0),as.numeric(sum(temp[,8])>0),as.numeric(sum(temp[,9])>0),as.numeric(sum(temp[,10])>0),as.numeric(sum(temp[,11])>0))
colnames(noon_table)<- c("Time","TV","home_theatre","treadmill","iron","Oven","hoover","washing_machine","dish_washer","toaster","hair_dryer")
while(i<32){
i=i+1
temp<-noon[seq(i,96,32),]
noon_table_new<-data.frame(c(as.Date(temp[1,1])),as.numeric(sum(temp[,2])>0),as.numeric(sum(temp[,3])>0),as.numeric(sum(temp[,4])>0),as.numeric(sum(temp[,5])>0),as.numeric(sum(temp[,6])>0),as.numeric(sum(temp[,7])>0),as.numeric(sum(temp[,8])>0),as.numeric(sum(temp[,9])>0),as.numeric(sum(temp[,10])>0),as.numeric(sum(temp[,11])>0))
colnames(noon_table_new)<- c("Time","TV","home_theatre","treadmill","iron","Oven","hoover","washing_machine","dish_washer","toaster","hair_dryer")
noon_table<-rbind(noon_table,noon_table_new)
}
four_block_table_new<-data.frame("noon",mean(noon_table[,2]),mean(noon_table[,3]),mean(noon_table[,4]),mean(noon_table[,5]),mean(noon_table[,6]),mean(noon_table[,7]),mean(noon_table[,8]),mean(noon_table[,9]),mean(noon_table[,10]),mean(noon_table[,11]))
colnames(four_block_table_new)<- c("Time","TV","home_theatre","treadmill","iron","Oven","hoover","washing_machine","dish_washer","toaster","hair_dryer")
four_block_table<-rbind(four_block_table,four_block_table_new)
#afternoon
afternoon<-boolean_table[c(seq(15, 768, 24),seq(16, 768, 24),seq(17, 768, 24),seq(18, 768, 24),seq(19, 768, 24),seq(20, 768, 24)),]
i=1
temp<-afternoon[seq(i,192,32),]
afternoon_table<-data.frame(c(as.Date(temp[1,1])),as.numeric(sum(temp[,2])>0),as.numeric(sum(temp[,3])>0),as.numeric(sum(temp[,4])>0),as.numeric(sum(temp[,5])>0),as.numeric(sum(temp[,6])>0),as.numeric(sum(temp[,7])>0),as.numeric(sum(temp[,8])>0),as.numeric(sum(temp[,9])>0),as.numeric(sum(temp[,10])>0),as.numeric(sum(temp[,11])>0))
colnames(afternoon_table)<- c("Time","TV","home_theatre","treadmill","iron","Oven","hoover","washing_machine","dish_washer","toaster","hair_dryer")
while(i<32){
i=i+1
temp<-afternoon[seq(i,192,32),]
afternoon_table_new<-data.frame(c(as.Date(temp[1,1])),as.numeric(sum(temp[,2])>0),as.numeric(sum(temp[,3])>0),as.numeric(sum(temp[,4])>0),as.numeric(sum(temp[,5])>0),as.numeric(sum(temp[,6])>0),as.numeric(sum(temp[,7])>0),as.numeric(sum(temp[,8])>0),as.numeric(sum(temp[,9])>0),as.numeric(sum(temp[,10])>0),as.numeric(sum(temp[,11])>0))
colnames(afternoon_table_new)<- c("Time","TV","home_theatre","treadmill","iron","Oven","hoover","washing_machine","dish_washer","toaster","hair_dryer")
afternoon_table<-rbind(afternoon_table,afternoon_table_new)
}
four_block_table_new<-data.frame("afternoon",mean(afternoon_table[,2]),mean(afternoon_table[,3]),mean(afternoon_table[,4]),mean(afternoon_table[,5]),mean(afternoon_table[,6]),mean(afternoon_table[,7]),mean(afternoon_table[,8]),mean(afternoon_table[,9]),mean(afternoon_table[,10]),mean(afternoon_table[,11]))
colnames(four_block_table_new)<- c("Time","TV","home_theatre","treadmill","iron","Oven","hoover","washing_machine","dish_washer","toaster","hair_dryer")
four_block_table<-rbind(four_block_table,four_block_table_new)
#night
night<-boolean_table[c(seq(21, 768, 24),seq(22),seq(23, 768, 24),seq(24, 768, 24),seq(1, 768, 24),seq(2, 768, 24),seq(3, 768, 24),seq(4, 768, 24),seq(5, 768, 24),seq(6, 768, 24)),]
i=1
temp<-night[seq(i,310,32),]
night_table<-data.frame(c(as.Date(temp[1,1])),as.numeric(sum(temp[,2])>0),as.numeric(sum(temp[,3])>0),as.numeric(sum(temp[,4])>0),as.numeric(sum(temp[,5])>0),as.numeric(sum(temp[,6])>0),as.numeric(sum(temp[,7])>0),as.numeric(sum(temp[,8])>0),as.numeric(sum(temp[,9])>0),as.numeric(sum(temp[,10])>0),as.numeric(sum(temp[,11])>0))
colnames(night_table)<- c("Time","TV","home_theatre","treadmill","iron","Oven","hoover","washing_machine","dish_washer","toaster","hair_dryer")
while(i<32){
i=i+1
temp<-night[seq(i,310,32),]
night_table_new<-data.frame(c(as.Date(temp[1,1])),as.numeric(sum(temp[,2])>0),as.numeric(sum(temp[,3])>0),as.numeric(sum(temp[,4])>0),as.numeric(sum(temp[,5])>0),as.numeric(sum(temp[,6])>0),as.numeric(sum(temp[,7])>0),as.numeric(sum(temp[,8])>0),as.numeric(sum(temp[,9])>0),as.numeric(sum(temp[,10])>0),as.numeric(sum(temp[,11])>0))
colnames(night_table_new)<- c("Time","TV","home_theatre","treadmill","iron","Oven","hoover","washing_machine","dish_washer","toaster","hair_dryer")
night_table<-rbind(night_table,night_table_new)
}
four_block_table_new<-data.frame("night",mean(night_table[,2]),mean(night_table[,3]),mean(night_table[,4]),mean(night_table[,5]),mean(night_table[,6]),mean(night_table[,7]),mean(night_table[,8]),mean(night_table[,9]),mean(night_table[,10]),mean(night_table[,11]))
colnames(four_block_table_new)<- c("Time","TV","home_theatre","treadmill","iron","Oven","hoover","washing_machine","dish_washer","toaster","hair_dryer")
four_block_table<-rbind(four_block_table,four_block_table_new)
#
#convert to ploting graph
k=1
x<-four_block_table[k,1]
y<-c("TV","Home_theatre","Treadmill","Iron","Oven","Hoover","Washing_machine","Dish_washer","Toaster","Hair_dryer")
graphtable <- expand.grid(X=x, Y=y)
graphtable$Z<-c((four_block_table[k,2:11]))
k=k+1
while(k<=4)
{
x<-four_block_table[k,1]
newgraphline <- expand.grid(X=x, Y=y)
newgraphline$Z<-c((four_block_table[k,2:11]))
graphtable<-rbind(graphtable,newgraphline)
k=k+1
}
graphtable$Z<-as.numeric(graphtable$Z)
q<-ggplot(graphtable, aes(X, Y, fill= Z)) +
geom_tile()
q
#convert to activities table
i=1
Relaxing<-as.numeric(boolean_table[i,2]||boolean_table[i,3])
Doing_Laundry<-as.numeric(boolean_table[i,5]||boolean_table[i,8])
Prepering_Food<-as.numeric(boolean_table[i,6]||boolean_table[i,10])
Cleaning<-as.numeric(boolean_table[i,7]||boolean_table[i,9])
Exercising<-as.numeric(boolean_table[i,4])
Bathing<-as.numeric(boolean_table[i,11])
activity_table<-data.frame(boolean_table[i,1],Relaxing,Doing_Laundry,Prepering_Food,Cleaning,Exercising,Bathing)
colnames(activity_table) <- c("Time","Relaxing","Doing_Laundry","Prepering_Food","Cleaning","Exercising","Bathing")
while(i<nrow(boolean_table))
{
i=i+1
Relaxing<-as.numeric(boolean_table[i,2]||boolean_table[i,3])
Doing_Laundry<-as.numeric(boolean_table[i,5]||boolean_table[i,8])
Prepering_Food<-as.numeric(boolean_table[i,6]||boolean_table[i,10])
Cleaning<-as.numeric(boolean_table[i,7]||boolean_table[i,9])
Exercising<-as.numeric(boolean_table[i,4])
Bathing<-as.numeric(boolean_table[i,11])
newactivity_table<-data.frame(boolean_table[i,1],Relaxing,Doing_Laundry,Prepering_Food,Cleaning,Exercising,Bathing)
colnames(newactivity_table) <- c("Time","Relaxing","Doing_Laundry","Prepering_Food","Cleaning","Exercising","Bathing")
activity_table<-rbind(activity_table,newactivity_table)
}
View(activity_table)
#activity table convert to daily table
j=1
newd<-activity_table[seq(j, 768, 24),]
daily<-data.frame(hour(newd[1,1]),mean(newd[,2]),mean(newd[,3]),mean(newd[,4]),mean(newd[,5]),mean(newd[,6]),mean(newd[,7]))
colnames(daily) <- c("Time","Relaxing","Doing_Laundry","Prepering_Food","Cleaning","Exercising","Bathing")
j=j+1
while(j<=24)
{
newd<-activity_table[seq(j, 768, 24),]
newdaily<-data.frame(hour(newd[1,1]),mean(newd[,2]),mean(newd[,3]),mean(newd[,4]),mean(newd[,5]),mean(newd[,6]),mean(newd[,7]))
colnames(newdaily)  <- c("Time","Relaxing","Doing_Laundry","Prepering_Food","Cleaning","Exercising","Bathing")
daily<-rbind(daily,newdaily)
j=j+1
}
View(daily)
#convert to ploting table
k=1
x=sprintf("%d:00 to %d:00",daily[k,1],(daily[k,1]+1))
y<-c("Relaxing","Doing_Laundry","Prepering_Food","Cleaning","Exercising","Bathing")
graphtable <- expand.grid(X=x, Y=y)
graphtable$Z<-c(daily[k,2:7])
k=k+1
while(k<=24)
{
x=sprintf("%d:00 to %d:00",daily[k,1],(daily[k,1]+1))
newgraphline <- expand.grid(X=x, Y=y)
newgraphline$Z<-c(daily[k,2:7])
graphtable<-rbind(graphtable,newgraphline)
k=k+1
}
graphtable$Z<-as.numeric(graphtable$Z)
q<-ggplot(graphtable, aes(X, Y, fill= Z)) +
geom_tile()
q
q + theme(axis.text.x = element_text(angle = 90, hjust = 1))
plot <-
plot_ly(
mode = 'lines'
) %>%
add_trace(
y =  ~ daily$Relaxing,
x =  ~ 1:32,
mode = 'lines',
type = 'scatter',
name = "Relaxing",
line = list(color = ("red"))
) %>%
add_trace(
y =  ~ daily$Doing_Laundry,
x =  ~ 1:32,
mode = 'lines',
type = 'scatter',
name = "Doing_Laundry",
line = list(color = ("green"))
)%>%
add_trace(
y =  ~ daily$Prepering_Food,
x =  ~ 1:32,
mode = 'lines',
type = 'scatter',
name = "Prepering_Food",
line = list(color = ("blue"))
) %>%
add_trace(
y =  ~ daily$Cleaning,
x =  ~ 1:32,
mode = 'lines',
type = 'scatter',
name = "Cleaning",
line = list(color = ("orange"))
)%>%
add_trace(
y =  ~ daily$Exercising,
x =  ~ 1:32,
mode = 'lines',
type = 'scatter',
name = "Exercising",
line = list(color = ("purple"))
) %>%
add_trace(
y =  ~ daily$Bathing,
x =  ~ 1:32,
mode = 'lines',
type = 'scatter',
name = "Bathing",
line = list(color = ("black"))
)%>%
layout(
title = paste("Hours spend on each activies per day"),
xaxis = list(
title = 'Days',
autotick = TRUE,
showticklabels = TRUE,
face = "bold"
),
yaxis = list(title = "Hours",face = "bold")
)
plot
View(daily)
View(activity_table)
j=1
newd<-activity_table[j:(j+23),]
daily<-data.frame(sum(newd[,2]),sum(newd[,3]),sum(newd[,4]),sum(newd[,5]),sum(newd[,6]),sum(newd[,7]))
colnames(daily) <- c("Relaxing","Doing_Laundry","Prepering_Food","Cleaning","Exercising","Bathing")
j=j+24
while(j<768)
{
newd<-activity_table[j:(j+23),]
newdaily<-data.frame(sum(newd[,2]),sum(newd[,3]),sum(newd[,4]),sum(newd[,5]),sum(newd[,6]),sum(newd[,7]))
colnames(newdaily) <- c("Relaxing","Doing_Laundry","Prepering_Food","Cleaning","Exercising","Bathing")
daily<-rbind(daily,newdaily)
j=j+24
}
bar_chart<-data.frame(c("Relaxing","Doing_Laundry","Prepering_Food","Cleaning","Exercising","Bathing"),c(mean(daily$Relaxing),mean(daily$Doing_Laundry),mean(daily$Prepering_Food),mean(daily$Cleaning),mean(daily$Exercising),mean(daily$Bathing)))
colnames(bar_chart) <- c("activity","Average_hour_per_day")
#plot bar chart
ggplot(bar_chart, aes(x=activity, y=Average_hour_per_day)) +
geom_bar(stat = "identity")
ggsave(filename = "Average_hour_per_day.png",
ggplot(bar_chart, aes(x=activity, y=Average_hour_per_day)) +
geom_bar(stat = "identity") + theme(
axis.text.x = element_text(face = "bold"),       # Change x axis title only
axis.text.y = element_text(face = "bold"),       # Change y axis title only
)
,
width = 7, height = 3, dpi = 300, units = "in", device='png')
#plot line chart
View(daily)
write.csv(activity_table, file = "MyData.csv")
write.csv(daily, file = "MyData.csv")
write.csv(daily, file = "MyData.csv")
library(tensorflow)
library(keras)
# x <- list()
# y <- list()
#
# for (i in 1:100)
# {
#   x[i] = i
#   y[i] = i*10
# }
# x[1]
# y[1]
# window = 4
# trx_start = 80-window+1
# trx_stop = 91
# try_start = 80-window
# try_stop = 91-1
# train_x = x[trx_start:trx_stop]
# train_y = y[try_start:try_stop]
# flist = list()
# flist = timeseries_generator(train_x, train_y, window, sampling_rate = 1,
#                               stride = 1, start_index = 0, end_index = NULL, shuffle = FALSE,
#                              reverse = FALSE, batch_size = 128)
# a = flist[0][1]
# a
# b = flist[0][2]
# b
setwd('C:\\Users\\yashb\\Desktop\\Access\\summer project')
data <- read.csv(file='data.csv')
dates = data[1]
power = data[2]
features = subset(data, select = -c(date, fwts))
data
if(dates[6,]=="2016-01-01")
{
print('hey')
}
################################################################
# creating traing and testing set based on date
date = "2017-02-12"
counter = 0
start = 0
l = dim(dates)
l
for(i in 1:l[1])
{
if(dates[i,]==date)
{
if(counter==0)
{
start = i;
counter = counter+1
}
else
{
counter = counter+1
}
}
}
stop = start+counter
start = start+1-1
start
stop
window = 5
#scaling the data
trainx_start = start- (288*30) -window +1
trainx_stop = start-1
trainy_start = start-(288*30) - window
trainy_stop = start-2
train_x = features[trainx_start:trainx_stop,]
train_y = power[trainy_start:trainy_stop,]
testx_start = start-window+1
testx_stop = stop
testy_start = start-window
testy_stop = stop-1
test_x = features[testx_start:testx_stop,]
test_y = power[testy_start:testy_stop,]
dim(train_x)
train_y
# if(dates[298,]=='2016-01-02')
# {
#   print("hello")
# }
##################################################################
flist = list()
flist = timeseries_generator(train_x, train_y, window, sampling_rate = 1,
stride = 1, start_index = 0, end_index = NULL, shuffle = FALSE,
reverse = FALSE, batch_size = 128)
# timeseries_generator <- function(data, targets, length, sampling_rate = 1,
#                                  stride = 1, start_index = 0, end_index = NULL,
#                                  shuffle = FALSE, reverse = FALSE, batch_size = 128) {
# keras$preprocessing$sequence$TimeseriesGenerator(
#     data = keras_array(data),
#     targets = keras_array(targets),
#     length = as.integer(length),
#     sampling_rate = as.integer(sampling_rate),
#     stride = as.integer(stride),
#     start_index = as.integer(start_index),
#     end_index = as_nullable_integer(end_index),
#     shuffle = shuffle,
#     reverse = reverse,
#     batch_size = as.integer(batch_size)
#   )
# }
flist = timeseries_generator(train_x,train_y,window)
a = flist[0][1]
a
b = flist[0][2]
b
model <- keras_model_sequential()
model %>%
layer_lstm(units = 200, activation = 'relu', input_shape = c(window,15)) %>%
layer_dropout(rate = 0.3) %>%
layer_dense(units = 1)
summary(model)
model %>% compile(
loss = 'mse',
optimizer = optimizer_adam(lr = 0.0001))
history <- model %>% fit(
train_x, train_y,
epochs = 30, batch_size = 4
)
history
train_x
dim(train_x)
start
stop
window = 5
#scaling the data
trainx_start = start- (288*30) -window +1
trainx_stop = start-1
trainy_start = start-(288*30) - window
trainy_stop = start-2
train_x = features[trainx_start:trainx_stop,]
train_y = power[trainy_start:trainy_stop,]
testx_start = start-window+1
testx_stop = stop
testy_start = start-window
testy_stop = stop-1
test_x = features[testx_start:testx_stop,]
test_y = power[testy_start:testy_stop,]
dim(train_x)
train_y
features = subset(data, select = -c(date, fwts))
data
dates = data[1]
dates
View(dates)
dates = data$datetime
power = data$fwts
features = subset(data, select = -c(date, fwts))
features = subset(data, select = c(date, fwts))
subset(data, select = -c(date, fwts))
c(date, fwts)
features = subset(data, select = -c('date', 'fwts'))
data
if(dates[6,]=="2016-01-01")
{
print('hey')
}
View(data)
dates = data$datetime
power
features <-data[3,]
View(features)
features <-data[,c(3,4)]
View(features)
features <-data[,c(2,3)]
data
if(dates[6,]=="2016-01-01")
{
print('hey')
}
date = "2017-02-12"
counter = 0
start = 0
l = dim(dates)
l
for(i in 1:l[1])
{
if(dates[i,]==date)
{
if(counter==0)
{
start = i;
counter = counter+1
}
else
{
counter = counter+1
}
}
}
stop = start+counter
start = start+1-1
start
stop
window = 5
#scaling the data
trainx_start = start- (288*30) -window +1
trainx_stop = start-1
trainy_start = start-(288*30) - window
trainy_stop = start-2
train_x = features[trainx_start:trainx_stop,]
train_y = power[trainy_start:trainy_stop,]
testx_start = start-window+1
testx_stop = stop
testy_start = start-window
testy_stop = stop-1
test_x = features[testx_start:testx_stop,]
test_y = power[testy_start:testy_stop,]
dim(train_x)
train_y
trainx_start
trainx_stop
trainy_start
train_x
dim(train_x)
dim(train_y)
train_y = power[trainy_start:trainy_stop,]
train_y = power[trainy_start:trainy_stop]
dim(train_y)
train_y
dim(train_y)
dim(train_x)
train_x
View(train_x)
View(result_list)
mean(result_list$Peak_dif_mean)
mean(result_list$Peak_dif_AVG)
mean(result_list$Peak_dif_mean<60)
library(shiny); runApp('C:/Users/Gavyd/Downloads/dashboard.R')
runApp('D:/Hydro-Prediction-System/ui/dashboard.R')
source('D:/Hydro-Prediction-System/ui/Hydro_prediction.R')
